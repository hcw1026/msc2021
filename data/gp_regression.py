# MIT License

# Copyright (c) 2020 Yann Dubois, Jonathan Gordon, Andrew YK Foong

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import copy
import numpy as np
import os
import random
from scipy.stats import betabinom
import sklearn
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, WhiteKernel, ExpSineSquared, Matern

from data.tools import rescale_range, load_chunk, save_chunk, NotLoadedError, DatasetMerger, MetaSplit, ratio_to_int, indep_shuffle_

import tensorflow as tf

###########################################################################################
# DataProvider
###########################################################################################
class DataProvider():
    def __init__(self, dataset_split, config, train_datasets=None):
        self._dataset_split = MetaSplit(dataset_split)
        if self._dataset_split == MetaSplit.TRAIN:
            self._batch_size = config["Train"]["batch_size"]
        else:
            self._batch_size = config["Eval"]["batch_size"]

        self._train_datasets = train_datasets
        self.datasets = self._load()

        # Dataset Configurations
        _config = config["Data"]["gp_regression"]
        self._n_points = _config["n_points"]
        self._float_dtype = tf.float32


    @property
    def get_datasets(self):
        """return GPDataset object"""
        return self.datasets

    def _load(self):
        return get_all_gp_datasets(dataset_split=self._dataset_split, train_datasets=self._train_datasets)

    def _generator(self, dataset):
        """return self.datasets as generator"""
        def generator():
            yield dataset[0]

        return generator

    def _generate_from_generator(self, datasets):
        datasets_out = dict()

        output_signature = (
        tf.TensorSpec(shape=(self._n_points,1), dtype=self._float_dtype), 
        tf.TensorSpec(shape=(self._n_points,1), dtype=self._float_dtype))
        

        for k, dataset in datasets.items():
            datasets_out[k] = tf.data.Dataset.from_generator(
                generator=self._generator(dataset),
                output_signature=output_signature 
                )

        return datasets_out

    def _generate_from_dataset(self, datasets):
        datasets_out = dict()

        for k, dataset in datasets.items():
            if isinstance(dataset, DatasetMerger):
                X = [d[:][0] for d in dataset.datasets]
                y = [d[:][1] for d in dataset.datasets]
                datasets_out[k] = tf.data.Dataset.from_tensor_slices((tf.concat(X, axis=0), tf.concat(y, axis=0)))

            else:
                datasets_out[k] = tf.data.Dataset.from_tensor_slices(dataset[:])
        
        return datasets_out

    def generate(self):
        if self._dataset_split == MetaSplit.TRAIN or self._train_datasets is None or self._dataset_split == MetaSplit.TRIAL:
            return self._generate_from_generator(self.datasets)
        else:
            return self._generate_from_dataset(self.datasets)

    def generate_test(self, dataset_split="test"):
        """generate test set directly from the train DataProvider class
        dataset_split: str
            - "val" or "test". Generate a fixed size dataset with the same parameters as the training dataset of this class instance
        """
        if self._train_datasets is not None:
            raise Exception("generate_test is not available when train_datasets is provided in class initialisation")

        test_datasets = get_all_gp_datasets(dataset_split=dataset_split, train_datasets=self.datasets)
        return self._generate_from_dataset(test_datasets)


###########################################################################################
# Dataset class
###########################################################################################

class GPDataset():
    """
    Dataset of functions generated by a gaussian process.

    Parameters
    ----------
    kernel : sklearn.gaussian_process.kernels or list
        The kernel specifying the covariance function of the GP. If None is
        passed, the kernel "1.0 * RBF(1.0)" is used as default.

    min_max : tuple of floats, optional
        Min and max point at which to evaluate the function (bounds).

    n_samples : int, optional
        Number of sampled functions contained in dataset.

    n_points : int, optional
        Number of points at which to evaluate f(x) for x in min_max.

    is_vary_kernel_hyp : bool, optional
        Whether to sample each example from a kernel with random hyperparameters,
        that are sampled uniformly in the kernel hyperparameters `*_bounds`.

    save_file : string or tuple of strings, optional
        Where to save and load the dataset. If tuple `(file, group)`, save in
        the hdf5 under the given group. If `None` regenerate samples indefinitely.
        Note that if the saved dataset has been completely used,
        it will generate a new sub-dataset for every epoch and save it for future
        use.

    n_same_samples : int, optional
        Number of samples with same kernel hyperparameters and X. This makes the
        sampling quicker.

    is_reuse_across_epochs : bool, optional
        Whether to reuse the same samples across epochs.  This makes the
        sampling quicker and storing less memory heavy if `save_file` is given.

    generated_from : str or None, optional
        A string to record which function is used to generate this dataset instance

    kwargs:
        Additional arguments to `GaussianProcessRegressor`.
    """

    def __init__(
        self,
        kernel=(
            WhiteKernel(noise_level=0.1, noise_level_bounds=(0.1, 0.5))
            + RBF(length_scale=0.4, length_scale_bounds=(0.1, 1.0))
        ),
        min_max=(-2, 2),
        n_samples=1000,
        n_points=128,
        is_vary_kernel_hyp=False,
        save_file=None,
        n_same_samples=20,
        is_reuse_across_epochs=True,
        generated_from=None,
        **kwargs,
    ):

        self.n_samples = n_samples
        self.n_points = n_points
        self.min_max = min_max
        self.is_vary_kernel_hyp = is_vary_kernel_hyp
        self.save_file = save_file
        self.n_same_samples = n_same_samples
        self.is_reuse_across_epochs = is_reuse_across_epochs

        self.generated_from = generated_from

        self._float_dtype = tf.float32

        self._idx_precompute = 0  # current index of precomputed data
        self._idx_chunk = 0  # current chunk (i.e. epoch)

        if not is_vary_kernel_hyp:
            # only fit hyperparam when predicting if using various hyperparam
            kwargs["optimizer"] = None

            # we also fix the bounds as these will not be needed
            for hyperparam in kernel.hyperparameters:
                kernel.set_params(**{f"{hyperparam.name}_bounds": "fixed"})

        self.generator = GaussianProcessRegressor(
            kernel=kernel, alpha=0.005, **kwargs  # numerical stability for preds
        )

        self.precompute_chunk_()

    def __len__(self):
        return self.n_samples

    def __getitem__(self, index):
        if self.is_reuse_across_epochs:
            return self.data[index], self.targets[index]

        else:
            # doesn't use index because randomly generated in any case => sample
            # in order which enables to know when epoch is finished and regenerate
            # new functions
            self._idx_precompute += 1
            if self._idx_precompute == self.n_samples:
                self.precompute_chunk_()
            return self.data[self._idx_precompute], self.targets[self._idx_precompute]

    def get_samples(
        self,
        n_samples=None,
        test_min_max=None,
        n_points=None,
        save_file=None,
        idx_chunk=None,
    ):
        """Return a batch of samples

        Parameters
        ----------
        n_samples : int, optional
            Number of sampled function (i.e. batch size). Has to be dividable
            by n_diff_kernel_hyp or 1. If `None` uses `self.n_samples`.

        test_min_max : float, optional
            Testing range. If `None` uses training one.

        n_points : int, optional
            Number of points at which to evaluate f(x) for x in min_max. If None
            uses `self.n_points`.

        save_file : string or tuple of strings, optional
            Where to save and load the dataset. If tuple `(file, group)`, save in
            the hdf5 under the given group. If `None` uses does not save.

        idx_chunk : int, optional
            Index of the current chunk. This is used when `save_file` is not None,
            and you want to save a single dataset through multiple calls to
            `get_samples`.
        """
        test_min_max = test_min_max if test_min_max is not None else self.min_max
        n_points = n_points if n_points is not None else self.n_points
        n_samples = n_samples if n_samples is not None else self.n_samples

        try:
            loaded = load_chunk({"data", "targets"}, save_file, idx_chunk)
            data, targets = loaded["data"], loaded["targets"]
        except NotLoadedError:
            X = self._sample_features(test_min_max, n_points, n_samples)
            X, targets = self._sample_targets(X, n_samples)
            data = self._postprocessing_features(X, n_samples)
            save_chunk(
                {"data": data, "targets": targets},
                save_file,
                idx_chunk,
            )

        return data, targets

    def set_samples_(self, data, targets):
        """Use the samples (output from `get_samples`) as the data."""
        self.is_reuse_across_epochs = True
        self.data = data
        self.targets = targets
        self.n_samples = self.data.shape[0]

    def precompute_chunk_(self):
        """Load or precompute and save a chunk (data for an epoch.)"""
        self._idx_precompute = 0
        self.data, self.targets = self.get_samples(
            save_file=self.save_file, idx_chunk=self._idx_chunk
        )
        self._idx_chunk += 1

    def _sample_features(self, min_max, n_points, n_samples):
        """Sample X with non uniform intervals. """
        X = np.random.uniform(min_max[1], min_max[0], size=(n_samples, n_points))
        # sort which is convenient for plotting
        X.sort(axis=-1)
        return X

    def _postprocessing_features(self, X, n_samples):
        """Convert the features to a tensor, rescale them to [-1,1] and expand."""
        X = tf.expand_dims(tf.constant(X, dtype=self._float_dtype),-1)
        X = rescale_range(X, self.min_max, (-1, 1))
        return X

    def _sample_targets(self, X, n_samples):
        targets = X.copy()
        n_samples, n_points = X.shape
        for i in range(0, n_samples, self.n_same_samples):
            if self.is_vary_kernel_hyp:
                self.sample_kernel_()

            for attempt in range(self.n_same_samples):
                # can have numerical issues => retry using a different X
                try:
                    # takes care of boundaries
                    n_same_samples = targets[i : i + self.n_same_samples, :].shape[0]
                    targets[i : i + self.n_same_samples, :] = self.generator.sample_y(
                        X[i + attempt, :, np.newaxis],
                        n_samples=n_same_samples,
                        random_state=None,
                    ).transpose(1, 0)
                    X[i : i + self.n_same_samples, :] = X[i + attempt, :]
                except np.linalg.LinAlgError:
                    continue  # try again
                else:
                    break  # success
            else:
                raise np.linalg.LinAlgError("SVD did not converge 10 times in a row.")

        # shuffle output to not have n_same_samples consecutive
        X, targets = sklearn.utils.shuffle(X, targets)
        targets = tf.constant(targets, dtype=self._float_dtype)
        targets = tf.reshape(targets, [n_samples, n_points, 1])
        return X, targets

    def sample_kernel_(self):
        """
        Modify inplace the kernel hyperparameters through uniform sampling in their
        respective bounds.
        """
        K = self.generator.kernel
        for hyperparam in K.hyperparameters:
            K.set_params(
                **{hyperparam.name: np.random.uniform(*hyperparam.bounds.squeeze())}
            )


# 

###########################################################################################
# Tools to get datasets
###########################################################################################
def get_all_gp_datasets(dataset_split="train", train_datasets=None, **kwargs):
    """Return train / tets / valid sets for all GP experiments."""
    datasets = dict()

    if dataset_split == "train" or train_datasets is None or dataset_split == MetaSplit.TRAIN or dataset_split == MetaSplit.TRIAL:
        for f in [
            get_datasets_single_gp,
            get_datasets_variable_hyp_gp,
            get_datasets_variable_kernel_gp,
        ]:
            _datasets = f(dataset_split=dataset_split, train_datasets=train_datasets, **kwargs)
            datasets.update(_datasets)

    else:
        for k, dataset in train_datasets.items():
            if dataset.generated_from == "single_gp":
                datasets.update(get_datasets_single_gp(dataset_split=dataset_split, train_datasets={k:dataset}))
            elif dataset.generated_from == "variable_hyp_gp":
                datasets.update(get_datasets_variable_hyp_gp(dataset_split=dataset_split, train_datasets={k:dataset}))
            elif dataset.generated_from == "variable_kernel_gp":
                datasets.update(get_datasets_variable_kernel_gp(dataset_split=dataset_split, train_datasets={k:dataset}))
            else:
                raise Exception("{} in train_datasets are not generated from one of get_datasets_single_gp(), get_datasets_variable_hyp_gp, get_datasets_variable_kernel_gp()".format(dataset))

    return datasets


def get_datasets_single_gp(dataset_split="train", train_datasets=None, **kwargs):
    """Return train / tets / valid sets for 'Samples from a single GP'."""
    kernels = dict()

    kernels["RBF_Kernel"] = RBF(length_scale=(0.2))

    kernels["Periodic_Kernel"] = ExpSineSquared(length_scale=0.5, periodicity=0.5)

    # kernels["Matern_Kernel"] = Matern(length_scale=0.2, nu=1.5)

    kernels["Noisy_Matern_Kernel"] = WhiteKernel(noise_level=0.1) + Matern(
        length_scale=0.2, nu=1.5
    )

    return get_gp_datasets(
        kernels,
        dataset_split=dataset_split, 
        train_datasets=train_datasets,
        is_vary_kernel_hyp=False,  # use a single hyperparameter per kernel
        n_samples=50000,  # number of different context-target sets
        n_points=128,  # size of target U context set for each sample
        is_reuse_across_epochs=False,  # never see the same example twice
        generated_from = "single_gp",
        **kwargs,
    )


def get_datasets_variable_hyp_gp(dataset_split="train", train_datasets=None, **kwargs):
    """Return train / tets / valid sets for 'Samples from GPs with varying Kernel hyperparameters'."""
    kernels = dict()

    kernels["Variable_Matern_Kernel"] = Matern(length_scale_bounds=(0.01, 0.3), nu=1.5)

    return get_gp_datasets(
        kernels,
        dataset_split=dataset_split, 
        train_datasets=train_datasets,
        is_vary_kernel_hyp=True,  # use a different hyp for each samples
        n_samples=50000,  # number of different context-target sets
        n_points=128,  # size of target U context set for each sample
        is_reuse_across_epochs=False,  # never see the same example twice
        generated_from = "variable_hyp_gp",
        **kwargs,
    )


def get_datasets_variable_kernel_gp(dataset_split="train", train_datasets=None,**kwargs):
    """Return train / tets / valid sets for 'Samples from GPs with varying Kernels'."""

    if dataset_split == "train" or train_datasets is None or dataset_split == MetaSplit.TRAIN or dataset_split == MetaSplit.TRIAL:
        datasets = get_datasets_single_gp(dataset_split=dataset_split, train_datasets=train_datasets, **kwargs)
        all_kernels_datasets = DatasetMerger(datasets)
    else:
        datasets = dict()
        train_datasets = list(train_datasets.values())[0]
        for k, dataset in list(zip(train_datasets.datasets_names, train_datasets.datasets)): # get the datasets contained in train_datasets
            datasets.update(get_datasets_single_gp(dataset_split=dataset_split, train_datasets={k:dataset}, **kwargs))
        all_kernels_datasets = DatasetMerger(datasets)

    all_kernels_datasets.generated_from = "variable_kernel_gp"
    return dict(All_Kernels=all_kernels_datasets) # combine all kernels

def sample_gp_dataset_like(dataset, **kwargs):
    """Wrap the output of `get_samples` in a gp dataset."""
    new_dataset = copy.deepcopy(dataset)
    new_dataset.set_samples_(*dataset.get_samples(**kwargs))
    return new_dataset


DIR_DATA = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../../Other/gp/"))
def get_gp_datasets(
    kernels=None, save_file=f"{os.path.join(DIR_DATA, 'gp_dataset.hdf5')}", dataset_split="train", 
    train_datasets=None, **kwargs
):
    """
    Return a train, test or validation set for all the given kernels (dict).

    kernels: dict of sklearn.gaussian_process.kernel kernels
        - kernels for the datasets
    save_file: str
        - path of hdf5 file used to save previously generated datasets
    dataset_split: str
        - one of "train", "val", "test"
    train_datasets: None or GPDataset instance
        - If None, a new validation/test dataset without fixed samples are generated. If GPDataset is input, a new validation/test dataset with the same structure of the supplied dataset is genereated with fixed samples
    """

    if train_datasets is None and kernels is None:
        raise Exception("kernels must be specified when train_datasets is None")

    def get_save_file(name, save_file=save_file):
        if save_file is not None:
            save_file = (save_file, name)
        return save_file

    if dataset_split == "train" or train_datasets is None or dataset_split == MetaSplit.TRAIN or dataset_split == MetaSplit.TRIAL:
        datasets = dict() # store train datasets
        for name, kernel in kernels.items():
            datasets[name] = GPDataset(
                kernel=kernel, save_file=get_save_file(name), **kwargs
            )

    elif dataset_split == "test" or dataset_split == MetaSplit.TEST:
        # get validation and test datasets
        datasets = { # store test datasets
            k: sample_gp_dataset_like(
                dataset, save_file=get_save_file(k), idx_chunk=-1, n_samples=10000
            )
            for k, dataset in train_datasets.items()
        }

    elif dataset_split == "valid" or dataset_split == MetaSplit.VALID:
        datasets = { # store val datasets
            k: sample_gp_dataset_like(
                dataset,
                save_file=get_save_file(k),
                idx_chunk=-2,
                n_samples=dataset.n_samples // 10,
            )
            for k, dataset in train_datasets.items()
        }
    
    else:
        raise NameError("Unknown dataset_split")

    return datasets



if __name__ == "__main__":
    import sys
    sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    from utils import parse_config
    config = parse_config(os.path.join(os.path.dirname(os.path.dirname(__file__)), "config/debug.yaml"))
    dataloader = DataProvider("train", config)